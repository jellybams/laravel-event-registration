<?php
namespace Spoolphiz\Events\Models\Eloquent;
use \Eloquent;
use \Validator;
use Spoolphiz\Events\Models\Eloquent\Attendee;
use Spoolphiz\Events\Models\Eloquent\Venue;

class Event extends Eloquent {

	protected $userRoleIds = array('INSTRUCTOR'=>3);

	protected $defaultAttribs = array('category_id' => 1,
									'status' => 0,
									'create_seminaronly' => 0,
									'create_fullevent' => 1);

	/**
	 * List of possible event statuses
	 */
	public static $statuses = array(1 => 'Unpublished', 2 => 'Pending Approval', 3 => 'Active but not Shown', 4 => 'Published');

	 /**
	 * A white-list of fillable attributes - not really needed for this model but included for completeness
	 *
	 * @var array
	 */
	protected $fillable = array(
		'category_id',
		'venue_id',
		'start_date',
		'end_date',
		'title',
		'contact_phone',
		'seminar_price',
		'full_price',
		'capacity',
		'status',
		'create_seminaronly',
		'create_fullevent',
		'designation_id',
		'venue_confirmed',
		'clients_notified_of_venue',
		);

	 /**
	 * Validator rules
	 *
	 * @var array
	 */
	protected $validators = array('category_id' => array('required', 'numeric'),
								'venue_id' => array('numeric'),
								'start_date' => array('date'),
								'end_date' => array('date'),
								'title' => array('max:100'),
								'contact_phone' => array('max:30'),
								'seminar_price' => array('numeric'),
								'full_price' => array('numeric'),
								'capacity' => array('numeric'),
								'status' => array('required', 'numeric'),
								'create_seminaronly' => array('in:0,1'),
								'create_fullevent' => array('in:0,1'),
								'designation_id' => array('numeric'),
								'venue_confirmed' => array('in:0,1'),
								'clients_notified_of_venue' => array('in:0,1'),
								);

	 /**
	 * The database table used by the model.
	 *
	 * @var string
	 */
	protected $table = 'events';


	/**
	* Clones any objects assigned to this model's attribute keys
	* This remedies the fact that clone creates a shallow copy of the 
	* target objects properties (so attributes will be references to the original)
	*/
	/*
	public function __clone() 
	{ 
		foreach ($this->attributes as &$a) 
		{ 
			if( is_object($a) )
			{
				$a = clone $a;
			}
		} 
	}
	*/

	 /**
	 * Relationships
	 */
	public function attendees()
    {
        return $this->hasMany('Spoolphiz\Events\Models\Eloquent\Attendee');
    }

	public function instructors()
    {
        return $this->belongsToMany('Spoolphiz\Events\Models\Eloquent\User', 'event_instructor', 'event_id', 'user_id');
    }

	public function venue()
	{
		return $this->belongsTo('Spoolphiz\Events\Models\Eloquent\Venue');
	}

	public function category()
    {
        return $this->belongsTo('Spoolphiz\Events\Models\Eloquent\Category');
    }


	/**
	 * Validate the model's attributes.
	 *
	 * @return void
	 */
	public function validate()
	{
		$val = Validator::make($this->attributes, $this->validators);

		if ($val->fails())
		{
			throw new \ValidationException($val);
		}
	}


	/**
	 * Makes sure required values are present and fills in defaults if not.
	 * This function is to be run after fill() and before validate() to minimize risk of returning error to user
	 *
	 * @return void
	 */
	public function checkDefaults()
	{
		foreach( $this->defaultAttribs as $key => $value )
		{
			if( empty($this->$key) && $this->$key !== 0 )
			{
				$this->$key = $value;
			}
		}
	}


	/**
	 * saves an event, creates the appropriate search_terms field
	 *
	 * @return bool
	 */
	public function updateSearchTerms()
	{	
		//first cloning the object so I can later unset
		//the attributes that break save(), specifically those
		//set by BaseRepository::reloadRelationships() in 
		//the events api controller
		$copy = clone $this;
		
		//instructors
		$instructors = '';
		foreach( $this->instructors->toArray() as $ins )
		{
			$instructors .= $ins['username'] . ' ' . $ins['name'] . ' ';
		}
		//strip last trailing space
		$instructors = substr($instructors, 0, -1);
		
		//venue city
		$city = $this->venue->city;
		
		//event attendees
		$attendees = '';
		foreach( $this->attendees->toArray() as $attendee )
		{
			$attendees .= $attendee['name'] . ' ';
		}
		$attendees = substr($attendees, 0, -1);
		
		//build search terms string
		$searchTerms = "{$this->sku} {$this->id} {$this->title} $instructors $city $attendees";
		$copy->search_terms = $searchTerms;
		
		//unset relationship keys and save the copy instead of running parent::save(), which throws error
		//this is hackish but seems like the only way to keep updated relation keys generated by 
		//the BaseRepository::reloadRelationships();
		unset($copy->instructors);
		unset($copy->venue);
		unset($copy->attendees);
		
		$result = $copy->save();
		
		return $result;
	}
	

	/**
	 * deletes a event and its associated attendee records
	 *
	 * @return bool
	 */
	public function delete()
	{
		$attendees = $this->attendees;

		foreach( $attendees as $attendee )
		{
			$attendee->delete();
		}

		//TODO: delete instructor associations

		return parent::delete();
	}

	/**
	 * Overrides default fill function so that
	 * it handles one day events. If the end_date
	 * is set to null or empty string, it will 
	 * be set to be equal to start_date
	 * @param  array  $input input values
	 */
	public function fill(array $input)
	{
		if ((!isset($input['end_date']) OR !$input['end_date']) AND isset($input['start_date']) AND $input['start_date'])
			$input['end_date'] = $input['start_date'];

		return parent::fill($input);
	}


	/**
	 * runs toArray() for each object attribute for this model
	 * this is a compatibility thing for BaseRepository::reloadRelationships()
	 * to actually return data in json format
	 *
	 * @return bool
	 */
	public function toArray()
	{
		$event = parent::toArray();
		
		foreach( $event as &$attrib )
		{
			if( is_object($attrib) )
			{
				$attrib = $attrib->toArray();
			}
		}
		
		return $event;
	}
	
	

	/**
	 * decides if a user is allowed CRUD access to this resource - only happens if
	 * the user is admin, sales rep or listed as an instructor on the event
	 *
	 * @param $type		string - 'create', 'read', 'update', 'delete'
	 * @param $user		Spoolphiz\Events\Models\Eloquent\User
	 *
	 * @return bool
	 */
	public function allowAccess( $type, $user )
	{
		switch( $type )
		{
			case 'create':
			case 'update':
			case 'read':
				if( $user->isAdmin() || $user->isSalesRep() )
				{
					return true;
				}
				else
				{
					foreach( $this->instructors as $instructor )
					{
						if( $instructor->id == $user->id )
						{
							return true;
						}
					}
				}
			case 'delete':
				if( $user->isAdmin() )
				{
					return true;
				}
				else
				{
					return false;
				}
			default:
				return false;
		}



		return false;
	}
}